const list = [
  'auxwcbzrmdvpsjfgkrthnkioqm',
  'auxwcbzrmdvpsjfgbltonyijqe',
  'auxwcbzrmdfpsefgklthnoioqe',
  'auxwcbzrmdvpsjfgkluhnjisqe',
  'auxwcbzrmdvesjfgdzthnyioqe',
  'auxwcbzrmdvhsjfgklthnmijqe',
  'auxwcbzridvpsjfgkltxeyioqe',
  'ayxwcbzrgdvpsjfgklthiyioqe',
  'ajxwcbzrmdvpsjfgklkhnyiode',
  'auxwcbcrmdvpsjfqelthnyioqe',
  'auxwcbzrmsvpsjsgklthnyiope',
  'auxwcbzrmqvpsjzgklghnyioqe',
  'auxwcbzrmdvpsjtqklthxyioqe',
  'auxwcbzrmdopsjfdklthncioqe',
  'auxwcbzrmdvpsjfgkltmhyfoqe',
  'aixwcbzrmdvpsjfgllthdyeoqe',
  'vuxicbzrmdepsjfgklthnyioqe',
  'auxwcbbxmdkpsjfgklthnyioqe',
  'auxwcbzrgdvpsofaklthnyioqe',
  'auxycbzrmdvpsjfgklthnyuose',
  'aujwcbzrmdvprjfgkltcnyioqe',
  'auxwgbzrmdvpsjfgyzthnyioqe',
  'auxwcbzrmavpsjfgkltsnyiome',
  'auxwcbgrmdvpsjfgkdthnrioqe',
  'kuxwcbzrmdvpsyfgklthnyioue',
  'auxwcbzomdvpjdfgklthnyioqe',
  'auxwcbzrmdppsjfgklthvyifqe',
  'aunwubzrmdvpsjrgklthnyioqe',
  'auxwcbzrmoipsjfgklbhnyioqe',
  'auxwdbzrmdvpsjfgmlthnyioce',
  'auxwcbzjmsvpsjfiklthnyioqe',
  'auxwcbzrmwcpsjfcklthnyioqe',
  'auxwcbzfmdvprjfhklthnyioqe',
  'auxdcbzrgdvpsjfgklthnyxoqe',
  'wuxwbbzrmdvpsjfgklthnyiote',
  'auowcbjrmdvpsjfgklthnyfoqe',
  'auxwsbzrmdvpsjfglltcnyioqe',
  'quxwcbzrmdvpkjfgklthnyioqt',
  'vuxwcbzrudvpsjfgklthnyioqi',
  'puxwcbzrmdvgsjfgklthncioqe',
  'luxdcbzrmdvpsjfgkothnyioqe',
  'auxwcbzrmdvpsjfyklthfhioqe',
  'auxwcbqrmdvpsjfgkldhnyiote',
  'quxwcbzrmlvpsjfgklthnyioqi',
  'auxwcbzgmdvpsjfoklthnyiuqe',
  'auxwcbzrmdvpsbfgkltdjyioqe',
  'auxwcbzsmdrpsjfgklthpyioqe',
  'auxwcbzrmfvpsjfwklthnyiote',
  'auxbkpzrmdvpsjfgklthnyioqe',
  'auxwcbzrddvpsjfsklthnyroqe',
  'abxwcbzrmdvpsjfgkltdnyivqe',
  'awxwcbzrmvvpsjfgklthngioqe',
  'auxwcbzrmkvgsjfgkltcnyioqe',
  'auxwcbammdvpsjfgklthpyioqe',
  'auxwcbhrmdvpsjfgtlthnuioqe',
  'auxwcpzrmdvpbjogklthnyioqe',
  'auxwcbzrmdvpslfgklbhkyioqe',
  'auxwcbsrmdvpjjfgkldhnyioqe',
  'auxwcbzrmdqpsjfgauthnyioqe',
  'ydxwcbxrmdvpsjfgklthnyioqe',
  'auxwcbzrmdvpejfgklthnyyofe',
  'auxwchzrmxvpsjfgklthnyioqh',
  'auxwcbzrtdvpsjfgklxhnzioqe',
  'auxwcbyrmdvpsnfgklnhnyioqe',
  'auxwcbzrcdvpsjugklihnyioqe',
  'auxwcbzrddvpsjfgklhhnyiaqe',
  'aumwtbzrmdvpsjfgklthnyitqe',
  'auxucbzrmdvpsjfgklthwfioqe',
  'auxwcbzrmdvpzmfgkllhnyioqe',
  'auxwcbzrmdvpsjhgklthntiome',
  'buxwzbzrmdvpszfgklthnyioqe',
  'ouxwcbzsgdvpsjfgklthnyioqe',
  'auxwcbzrmdvpsjfskltgnyioqz',
  'auxwcbbrmdvpsjftklthnyioqu',
  'quxocbzrmdvpsjfgklthfyioqe',
  'acxwcbzrmdvpsjfgklfhnrioqe',
  'auxwcbzrmdnpsjfrkjthnyioqe',
  'wuxwybzrmdwpsjfgklthnyioqe',
  'auxwgbxrmdvpsjfghlthnyioqe',
  'atxwcbzrmdvnsjfgklthnyjoqe',
  'acxwcbzmmdvpsjfbklthnyioqe',
  'auxhcbzrmdvbsjbgklthnyioqe',
  'auxwlbzrfdvpsjfgxlthnyioqe',
  'auxwmbzrmdfpsjqgklthnyioqe',
  'auxwcbzrmdvpsgfgklahnyigqe',
  'auxwgbzrmdvpsjfgzldhnyioqe',
  'auxwcbzrmdvpydfgklthnyiohe',
  'auxwxbzrmdvpsjfsklchnyioqe',
  'auxqcbzrmdvpsjfgqlthnyiwqe',
  'auxwcozrmdvssbfgklthnyioqe',
  'auxvcczrmdvpsufgklthnyioqe',
  'auxwcbzrudvpsjfgklyhnyioxe',
  'aulwcbzrmdvpsjqgknthnyioqe',
  'auukcbzrmdvpsjfgklthtyioqe',
  'auxwcszimdvpsjfgklthnyigqe',
  'juxwcbzrbdvpsjfgklthnyboqe',
  'auxwcbzrmdvpjofgklthnyioqj',
  'auxwcbzrmdvpsjfgplfhnyione',
  'auxwcbzrmdhpsjfgkltknyeoqe',
  'luxwcqzrmdvpsjfgklthnbioqe',
  'uuxwcbzrmdvpsjfgkithnyiiqe',
  'auxwcbzrmdvpdjfgkrthnyeoqe',
  'auuwcbnrmdvpsjfgklthnjioqe',
  'auxwcnzrmdvpsjvgklthnyooqe',
  'auxwcbzcmdvpsjfcklthnyiose',
  'auxwcbzrldfpsjfgklthjyioqe',
  'auxwcizrmdvpsjfjklthnymoqe',
  'auxwcbtrmdvpsjfgtlphnyioqe',
  'amxwcbzrmdvksjfgklthnyiove',
  'auxwcbzrmdvpszfgkpthnyiuqe',
  'auxwcbzrmdvxdjfgkltqnyioqe',
  'auxwcbzrudvpsjfgklthnymiqe',
  'auxwcbirmdvfsjfgklmhnyioqe',
  'auwwcbzrndvprjfgklthnyioqe',
  'auxwcbormdgpsjfgklbhnyioqe',
  'auxwabzrmdupsjfgklthnyioqt',
  'auxvcbzrmdvpsjfgkltrmyioqe',
  'auxwcbzrmddpsjfsklthnyizqe',
  'auxwcczrmuvpyjfgklthnyioqe',
  'auxwcczrmdvpsnfgkpthnyioqe',
  'auxkcbzrmdvpsjfhklihnyioqe',
  'auxwcbzrmdvpsjfgklthnkijje',
  'auxwcbzcmdvpsjpgkldhnyioqe',
  'auxwcnzrudvpstfgklthnyioqe',
  'xuxwcbzrgdvusjfgklthnyioqe',
  'aaxwcbzrmdvpsjvgklthnyidqe',
  'auxwcbztmdvpsjfgklthnyhqqe',
  'auxwcbzrmfvpsjfgklthnyilfe',
  'auxwcbzrmdvksjfgklthjyioqq',
  'auxwcbzrmdzksjfgktthnyioqe',
  'auxwcbzrmfvpszfgklohnyioqe',
  'auxwckzamdvpsjfgklthnyioqs',
  'auxwcmzrhdvpsjfaklthnyioqe',
  'fuxwcbzrmdapsjfgklrhnyioqe',
  'avxwxbzrmdvpsjfgklthniioqe',
  'auxwubzrmevpsjfgkltpnyioqe',
  'fuxwcbzrgdvpsjfgklhhnyioqe',
  'duxwwbdrmdvpsjfgklthnyioqe',
  'audwcbzrmdvpnjcgklthnyioqe',
  'auxtcbzrmdvpsjmgklthnyyoqe',
  'aucwcbwrmdepsjfgklthnyioqe',
  'auxwcbzrudvpsjfpklthnyiose',
  'auxwcbzridvpsjfsklthxyioqe',
  'auxtcbzrmdvpscfgklyhnyioqe',
  'auxwcbzrmdvppjfgklthnyivee',
  'auxwdbzrmuvpskfgklthnyioqe',
  'auxwubzrmdvosjfgklthnyiope',
  'auxwcbzrmhnpsjfgklthnyimqe',
  'auxwcbzrmdqpwjfgkltpnyioqe',
  'auxwcbormdvpsjljklthnyioqe',
  'auxwcbzrmdjpsjfgkltjpyioqe',
  'auxwcbzrmdvpszfgklthkyizqe',
  'auxwcbzighvpsjfgklthnyioqe',
  'auxwcbzrmdlpsjfgcythnyioqe',
  'auxwcbzumdvpsjflklthnyimqe',
  'pdxwcbzrmdvpsjfgklthnyihqe',
  'auxwcbzrsdvpsjfgklhhvyioqe',
  'auxwcfzamdvpsjfgkmthnyioqe',
  'aexwcdzrmdvpsjogklthnyioqe',
  'auxxcbkrmavpsjfgklthnyioqe',
  'auxwcbzredvssjfgklthryioqe',
  'aupwqbzrmdvpsjfgklthnyioqc',
  'auxwcbzrmdvpkcagklthnyioqe',
  'auxwcbzrmdvwsbfgklthnlioqe',
  'aunwcbzxmdvhsjfgklthnyioqe',
  'auxwcbzrhddpsjfgklthnnioqe',
  'ouxwcbzrmdvtsifgklthnyioqe',
  'auxwcbzrmdqpsjfgklthnyfoqp',
  'auxwrbzrhdvpsjfgolthnyioqe',
  'auxwcbcqmdvpsjugklthnyioqe',
  'auxwcbzrqdvpsjhgklthnjioqe',
  'auxmcbzrmdvpsjfgmlthnyjoqe',
  'auxwcbzrmdvpsjfgzlthnycoqv',
  'auswcbzrmdvpsffgslthnyioqe',
  'auxwcbzrfdvpsjfrmlthnyioqe',
  'auxwcbzrmdvpsjngzlthnxioqe',
  'auxwcbzrmdvpsjfuqlthnyiyqe',
  'auxwzbzrrdvosjfgklthnyioqe',
  'auxwcbzdmdvpsjfikxthnyioqe',
  'guxwcbzrmdvpsjfgmlthnytoqe',
  'auxwcbzrmdvpspfgkytenyioqe',
  'auxvcbzrldvpsjfgklthnyhoqe',
  'auxwcbzrmavpckfgklthnyioqe',
  'autwcbzrmdvpsafgklthnyirqe',
  'auxwcbzrxuvpsjfgklthmyioqe',
  'auxwcbarmdppsjfgklthnywoqe',
  'anxvcbzrmdvpsjfgklthnyijqe',
  'auxwcbwrmdapsjngklthnyioqe',
  'abxwcbzrmdvpsjugkltgnyioqe',
  'auxwcbtrmdvpsjfgkltunyioue',
  'aujwcbzrmovpsjfgklthryioqe',
  'auxwcbzrydvpsjfgklthndikqe',
  'auxwcbzrmdvpsjfgklmrnyioqo',
  'auxwcbzrddvpsjfggithnyioqe',
  'auxwcbzrmdvpfjfaklthlyioqe',
  'fuxtcbzrmdvpsjfgklwhnyioqe',
  'tuxwcbzrjdvpsjfgjlthnyioqe',
  'auxwcbzrmdppsofgklthnyfoqe',
  'auxvclzamdvpsjfgklthnyioqe',
  'auxwcbzrmdvpsjfdklhhnzioqe',
  'auxwcbzrmsvpsvdgklthnyioqe',
  'arxfcbzrmdvpsvfgklthnyioqe',
  'auxzcbzrmdvpsjfgklthnhioqj',
  'auxwcbzrrdvpsjfgpltunyioqe',
  'auxuibzrmdvpwjfgklthnyioqe',
  'auxwcbzrwdqpsjfgklthnyooqe',
  'aujwcbzrmdvpsjvgklthxyioqe',
  'abxwcbzrmfvpsjfgklthnyxoqe',
  'aurwcbzrmdvpshfgklthnyhoqe',
  'auxwcbzjmdvpsjfgknthnycoqe',
  'auxwcbzrmdvpsjfgklmhxwioqe',
  'auxwcbzrmfvpsjfgklthnyiorq',
  'auxwcbormdvpsjfgklwhnlioqe',
  'auxwctzrmdvpsjfgklcknyioqe',
  'awxwcbzrmdvpsjfgvlthnyiome',
  'auxwcbzrmdvpsjfjklthnyixje',
  'auxwcsxrmdvpsjfgkltsnyioqe',
  'auxbmbzrmdvpsjfgklthnyioce',
  'auxwcbzrmdvpsjfukzthnytoqe',
  'aixwcbzrmdvpsjfgllthdyioqe',
  'auxwcbzrmdypsjfgklthnlioqy',
  'auxccbzrmdvpsjfgkltrnnioqe',
  'auxwcznrmdvpsjfgklthnykoqe',
  'auxwmqzrmdvpsjfgilthnyioqe',
  'auxwcbzrmdvpdyfgolthnyioqe',
  'auxwcbzrmdvpsjfgkmohnqioqe',
  'auxwcfzrmzvpsjfoklthnyioqe',
  'auxwjyzrmdvpsjfgulthnyioqe',
  'auxwcgzredvpsjfgkxthnyioqe',
  'wuxwcbtrmdvpsjfgklthnyiofe',
  'auxwcbzrmdopsgfgklthncioqe',
  'auxmcbzjmdvpsjfgklbhnyioqe',
  'auxwlbzrmdvpsjffklthgyioqe',
  'auxwcbzrmrvpsjfgqlthtyioqe',
  'kuxwhbzrmdvpsjfgklthgyioqe',
  'auxwcozrmdgpsjfgklthnydoqe',
  'auxwdbzrmdvpdjfgklthgyioqe',
  'auxwqbzrmdapsvfgklthnyioqe',
  'auqwcbzridvjsjfgklthnyioqe',
  'auxwckzrmdvpsjfoklthnyuoqe',
  'auxwcbzvmdvpsjfgklghnyiome',
  'auxtcbzrmdvpsjqgktthnyioqe',
  'auxwcbzrmdvesjfgkljhnnioqe',
  'auxwcbzrmpvpsqfgklthnqioqe',
  'auxwcbzrmdcpsqfgklthnzioqe',
  'yuxwcbzrmdvpsjggklthnlioqe',
  'auxwcbzradvpsjftklthoyioqe',
  'auxwcbzrmdvjujfgklmhnyioqe',
  'auxwcbzrmdvpsrfgklpinyioqe',
  'auxwobzrvqvpsjfgklthnyioqe',
  'aaabbbbcd'];

let matches;
let count2 = 0;
let count3 = 0;

const getIncreasedValueOrDefault = (dict, key) => {
  const val = dict.get(key);
  return (val ? val + 1 : 1);
};

list.forEach((item) => {
  const dict = new Map();
  Array.from(item).forEach(letter => {
    const count = getIncreasedValueOrDefault(dict, letter);
    dict.set(letter, count);
  });
  // find if one dictionary item has value of 2
  for (let v of dict.values()) {
    if (v === 2 || v === 3) {
      count2++;
      break;
    }
  }

  // find if one dictionary item has value of 3
  console.log(dict);

});
